/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—á–µ—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É invoice_history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
 */

import { type ApiResponse, handleSupabaseError, supabase } from '../supabase'

export interface InvoiceHistoryEntry {
  id: number
  invoice_id: number
  event_type: string
  event_date: string
  action: string
  description: string | null

  // –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
  payment_id: number | null
  document_id: number | null
  attachment_id: number | null

  // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Å—É–º–º
  status_from: string | null
  status_to: string | null
  amount_from: number | null
  amount_to: number | null

  // –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  changed_fields: Record<string, any> | null
  old_values: Record<string, any> | null
  new_values: Record<string, any> | null

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  user_id: string | null
  user_name: string | null
  user_role: string | null

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: Record<string, any> | null
  created_at: string

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  invoice_number?: string
  invoice_internal_number?: string
  payment_internal_number?: string
  document_name?: string
  user_email?: string
  user_full_name?: string
  role_name?: string
}

export type EventType =
  | 'INVOICE_CREATED'
  | 'INVOICE_UPDATED'
  | 'STATUS_CHANGED'
  | 'INVOICE_DELETED'
  | 'PAYMENT_CREATED'
  | 'PAYMENT_STATUS_CHANGED'
  | 'PAYMENT_AMOUNT_CHANGED'
  | 'PAYMENT_DELETED'
  | 'DOCUMENT_ADDED'
  | 'DOCUMENT_REMOVED'
  | 'COMMENT_ADDED'
  | 'WORKFLOW_CHANGED'
  | 'MRP_CHANGED'

export interface HistoryFilter {
  event_types?: EventType[]
  date_from?: string
  date_to?: string
  user_id?: string
  limit?: number
  offset?: number
}

export class InvoiceHistoryService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—á–µ—Ç–∞
   */
  static async getInvoiceHistory(
    invoiceId: string | number,
    filter?: HistoryFilter
  ): Promise<ApiResponse<InvoiceHistoryEntry[]>> {
    try {
      console.log('[InvoiceHistoryService.getInvoiceHistory] –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—á–µ—Ç–∞:', invoiceId, filter)

      let query = supabase
        .from('invoice_history_view')
        .select('*')
        .eq('invoice_id', Number(invoiceId))

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filter?.event_types && filter.event_types.length > 0) {
        query = query.in('event_type', filter.event_types)
      }

      if (filter?.date_from) {
        query = query.gte('event_date', filter.date_from)
      }

      if (filter?.date_to) {
        query = query.lte('event_date', filter.date_to)
      }

      if (filter?.user_id) {
        query = query.eq('user_id', filter.user_id)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
      query = query.order('event_date', { ascending: false })

      if (filter?.limit) {
        query = query.limit(filter.limit)
      }

      if (filter?.offset) {
        query = query.range(filter.offset, filter.offset + (filter.limit || 50) - 1)
      }

      const { data, error } = await query

      if (error) {
        console.error('[InvoiceHistoryService.getInvoiceHistory] –û—à–∏–±–∫–∞:', error)
        return handleSupabaseError(error)
      }

      console.log('[InvoiceHistoryService.getInvoiceHistory] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', data?.length || 0)
      return { data: data || [], error: null }
    } catch (error) {
      console.error('[InvoiceHistoryService.getInvoiceHistory] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      return {
        data: null,
        error: {
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          code: 'UNKNOWN_ERROR'
        }
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Å—á–µ—Ç—É
   */
  static async getPaymentHistory(
    invoiceId: string | number
  ): Promise<ApiResponse<InvoiceHistoryEntry[]>> {
    return this.getInvoiceHistory(invoiceId, {
      event_types: [
        'PAYMENT_CREATED',
        'PAYMENT_STATUS_CHANGED',
        'PAYMENT_AMOUNT_CHANGED',
        'PAYMENT_DELETED'
      ]
    })
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å—á–µ—Ç–∞
   */
  static async getDocumentHistory(
    invoiceId: string | number
  ): Promise<ApiResponse<InvoiceHistoryEntry[]>> {
    return this.getInvoiceHistory(invoiceId, {
      event_types: ['DOCUMENT_ADDED', 'DOCUMENT_REMOVED']
    })
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  static async addComment(
    invoiceId: string | number,
    comment: string
  ): Promise<ApiResponse<void>> {
    try {
      console.log('[InvoiceHistoryService.addComment] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', { invoiceId, comment })

      const { error } = await supabase.rpc('add_invoice_history_entry', {
        p_invoice_id: Number(invoiceId),
        p_event_type: 'COMMENT_ADDED',
        p_action: '–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        p_description: comment
      })

      if (error) {
        console.error('[InvoiceHistoryService.addComment] –û—à–∏–±–∫–∞:', error)
        return handleSupabaseError(error)
      }

      console.log('[InvoiceHistoryService.addComment] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω')
      return { data: undefined, error: null }
    } catch (error) {
      console.error('[InvoiceHistoryService.addComment] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      return {
        data: null,
        error: {
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          code: 'UNKNOWN_ERROR'
        }
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  static async addCustomEvent(
    invoiceId: string | number,
    eventType: string,
    action: string,
    description?: string,
    metadata?: Record<string, any>
  ): Promise<ApiResponse<void>> {
    try {
      console.log('[InvoiceHistoryService.addCustomEvent] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
        invoiceId,
        eventType,
        action,
        description,
        metadata
      })

      const { error } = await supabase.rpc('add_invoice_history_entry', {
        p_invoice_id: Number(invoiceId),
        p_event_type: eventType,
        p_action: action,
        p_description: description || null,
        p_metadata: metadata || null
      })

      if (error) {
        console.error('[InvoiceHistoryService.addCustomEvent] –û—à–∏–±–∫–∞:', error)
        return handleSupabaseError(error)
      }

      console.log('[InvoiceHistoryService.addCustomEvent] –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
      return { data: undefined, error: null }
    } catch (error) {
      console.error('[InvoiceHistoryService.addCustomEvent] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      return {
        data: null,
        error: {
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          code: 'UNKNOWN_ERROR'
        }
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å—á–µ—Ç–∞
   */
  static async getHistoryStats(
    invoiceId: string | number
  ): Promise<ApiResponse<{
    totalEvents: number
    statusChanges: number
    paymentEvents: number
    documentEvents: number
    updates: number
    comments: number
    lastModified: string | null
    lastModifiedBy: string | null
  }>> {
    try {
      const { data, error } = await this.getInvoiceHistory(invoiceId)

      if (error) {
        return { data: null, error }
      }

      const history = data || []

      const stats = {
        totalEvents: history.length,
        statusChanges: history.filter(h => h.event_type === 'STATUS_CHANGED').length,
        paymentEvents: history.filter(h => h.event_type?.startsWith('PAYMENT_')).length,
        documentEvents: history.filter(h => h.event_type?.startsWith('DOCUMENT_')).length,
        updates: history.filter(h => h.event_type === 'INVOICE_UPDATED').length,
        comments: history.filter(h => h.event_type === 'COMMENT_ADDED').length,
        lastModified: history[0]?.event_date || null,
        lastModifiedBy: history[0]?.user_name || null
      }

      console.log('[InvoiceHistoryService.getHistoryStats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats)
      return { data: stats, error: null }
    } catch (error) {
      console.error('[InvoiceHistoryService.getHistoryStats] –û—à–∏–±–∫–∞:', error)
      return {
        data: null,
        error: {
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          code: 'UNKNOWN_ERROR'
        }
      }
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å –≤–∞–ª—é—Ç–æ–π
   */
  static formatCurrency(amount: number | null, _currency?: string | null): string {
    if (!amount) {return ''}

    const formatted = amount.toLocaleString('ru-RU', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    })

    return `${formatted} ‚ÇΩ`
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  private static formatFileSize(bytes: number): string {
    if (!bytes) {return '0 –ë'}
    const k = 1024
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return `${(bytes / Math.pow(k, i)).toFixed(2)} ${sizes[i]}`
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatEventForDisplay(event: InvoiceHistoryEntry): {
    icon: string
    color: string
    title: string
    description: string
    details: string[]
  } {
    const details: string[] = []

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let icon = 'üìù'
    let color = 'default'
    let title = event.action
    let description = ''

    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const statusMap: Record<string, string> = {
      'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
      'pending': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
      'approved': '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω',
      'paid': '–û–ø–ª–∞—á–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
      'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
      'failed': '–û—à–∏–±–∫–∞',
      'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
    }

    switch (event.event_type) {
      case 'INVOICE_CREATED':
        icon = '‚ú®'
        color = 'blue'
        title = '–°–æ–∑–¥–∞–Ω'
        if (event.amount_to) {
          description = this.formatCurrency(event.amount_to, 'RUB')
        }
        break

      case 'INVOICE_UPDATED':
        icon = '‚úèÔ∏è'
        color = 'orange'
        title = '–ò–∑–º–µ–Ω–µ–Ω'
        if (event.changed_fields && event.old_values && event.new_values) {
          const fieldNames: Record<string, string> = {
            'amount': '—Å—É–º–º–∞',
            'total_amount': '–æ–±—â–∞—è —Å—É–º–º–∞',
            'amount_with_vat': '—Å—É–º–º–∞ —Å –ù–î–°',
            'amount_net': '—Å—É–º–º–∞ –±–µ–∑ –ù–î–°',
            'vat_amount': '—Å—É–º–º–∞ –ù–î–°',
            'vat_rate': '—Å—Ç–∞–≤–∫–∞ –ù–î–°',
            'contractor_id': '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
            'supplier_id': '–ø–æ—Å—Ç–∞–≤—â–∏–∫',
            'payer_id': '–ø–ª–∞—Ç–µ–ª—å—â–∏–∫',
            'project_id': '–ø—Ä–æ–µ–∫—Ç',
            'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
            'due_date': '—Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã',
            'invoice_number': '–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞',
            'internal_number': '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä',
            'invoice_date': '–¥–∞—Ç–∞ —Å—á–µ—Ç–∞',
            'delivery_days': '—Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏',
            'delivery_days_type': '—Ç–∏–ø —Å—Ä–æ–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏',
            'priority': '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'material_responsible_person_id': '–ú–û–õ'
          }

          // –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const priorityMap: Record<string, string> = {
            'low': '–Ω–∏–∑–∫–∏–π',
            'normal': '–æ–±—ã—á–Ω—ã–π',
            'high': '–≤—ã—Å–æ–∫–∏–π',
            'urgent': '—Å—Ä–æ—á–Ω—ã–π'
          }

          const deliveryTypeMap: Record<string, string> = {
            'calendar': '–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏',
            'working': '—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏'
          }

          // –°–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
          const changes: string[] = []

          for (const field of Object.keys(event.changed_fields)) {
            const fieldName = fieldNames[field] || field
            const oldValue = event.old_values[field]
            const newValue = event.new_values[field]

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
            if (field === 'total_amount' || field === 'amount_net' || field === 'vat_amount') {
              const oldAmount = oldValue ? this.formatCurrency(oldValue, 'RUB') : '0'
              const newAmount = newValue ? this.formatCurrency(newValue, 'RUB') : '0'
              changes.push(`${fieldName}: ${oldAmount} ‚Üí ${newAmount}`)
            } else if (field === 'vat_rate') {
              changes.push(`${fieldName}: ${oldValue ?? 0}% ‚Üí ${newValue ?? 0}%`)
            } else if (field === 'priority') {
              const oldPriority = priorityMap[oldValue] || oldValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'
              const newPriority = priorityMap[newValue] || newValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'
              changes.push(`${fieldName}: ${oldPriority} ‚Üí ${newPriority}`)
            } else if (field === 'delivery_days_type') {
              const oldType = deliveryTypeMap[oldValue] || oldValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'
              const newType = deliveryTypeMap[newValue] || newValue || '–Ω–µ —É–∫–∞–∑–∞–Ω'
              changes.push(`${fieldName}: ${oldType} ‚Üí ${newType}`)
            } else if (field === 'material_responsible_person_id') {
              // –î–ª—è –ú–û–õ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
              if (event.old_values.material_responsible_person_name || event.new_values.material_responsible_person_name) {
                const oldName = event.old_values.material_responsible_person_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                const newName = event.new_values.material_responsible_person_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                changes.push(`${fieldName}: ${oldName} ‚Üí ${newName}`)
              } else {
                // –ï—Å–ª–∏ –∏–º–µ–Ω –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                changes.push(`${fieldName} –∏–∑–º–µ–Ω–µ–Ω`)
              }
            } else if (field === 'supplier_id' || field === 'payer_id' || field === 'project_id') {
              // –î–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∏–∑ metadata
              // –ï—Å–ª–∏ –∏–º–µ–Ω –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
              if (event.metadata?.[`old_${field}_name`] || event.metadata?.[`new_${field}_name`]) {
                const oldName = event.metadata[`old_${field}_name`] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                const newName = event.metadata[`new_${field}_name`] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                changes.push(`${fieldName}: ${oldName} ‚Üí ${newName}`)
              } else {
                // –ü—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ ID
                changes.push(`${fieldName} –∏–∑–º–µ–Ω–µ–Ω`)
              }
            } else if (field === 'invoice_date' || field === 'due_date') {
              // –î–ª—è –¥–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
              const oldDate = oldValue ? new Date(oldValue).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
              const newDate = newValue ? new Date(newValue).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
              changes.push(`${fieldName}: ${oldDate} ‚Üí ${newDate}`)
            } else if (field === 'description') {
              // –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
              let oldDesc = oldValue || '–ø—É—Å—Ç–æ'
              let newDesc = newValue || '–ø—É—Å—Ç–æ'
              if (oldDesc.length > 30) {oldDesc = oldDesc.substring(0, 27) + '...'}
              if (newDesc.length > 30) {newDesc = newDesc.substring(0, 27) + '...'}
              changes.push(`${fieldName}: ${oldDesc} ‚Üí ${newDesc}`)
            } else {
              // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
              const oldDisplay = oldValue !== null && oldValue !== undefined ? String(oldValue) : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
              const newDisplay = newValue !== null && newValue !== undefined ? String(newValue) : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
              changes.push(`${fieldName}: ${oldDisplay} ‚Üí ${newDisplay}`)
            }
          }

          // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
          if (changes.length === 1) {
            description = changes[0]
          } else if (changes.length === 2) {
            description = changes.join('; ')
          } else {
            // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            description = changes.join(', ')
          }
        } else if (event.changed_fields) {
          // –ï—Å–ª–∏ –Ω–µ—Ç old_values/new_values, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
          const fieldNames: Record<string, string> = {
            'amount': '—Å—É–º–º–∞',
            'total_amount': '–æ–±—â–∞—è —Å—É–º–º–∞',
            'amount_with_vat': '—Å—É–º–º–∞ —Å –ù–î–°',
            'amount_net': '—Å—É–º–º–∞ –±–µ–∑ –ù–î–°',
            'vat_amount': '—Å—É–º–º–∞ –ù–î–°',
            'vat_rate': '—Å—Ç–∞–≤–∫–∞ –ù–î–°',
            'contractor_id': '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
            'supplier_id': '–ø–æ—Å—Ç–∞–≤—â–∏–∫',
            'payer_id': '–ø–ª–∞—Ç–µ–ª—å—â–∏–∫',
            'project_id': '–ø—Ä–æ–µ–∫—Ç',
            'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
            'due_date': '—Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã',
            'invoice_number': '–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞',
            'internal_number': '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä',
            'invoice_date': '–¥–∞—Ç–∞ —Å—á–µ—Ç–∞',
            'delivery_days': '—Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏',
            'delivery_days_type': '—Ç–∏–ø —Å—Ä–æ–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏',
            'priority': '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            'material_responsible_person_id': '–ú–û–õ'
          }
          const fields = Object.keys(event.changed_fields).map(f => fieldNames[f] || f)
          description = fields.join(', ')
        }
        break

      case 'STATUS_CHANGED':
        icon = 'üîÑ'
        color = event.status_to === 'paid' ? 'green' :
               event.status_to === 'cancelled' || event.status_to === 'rejected' ? 'red' : 'blue'
        title = '–°—Ç–∞—Ç—É—Å'
        const fromStatus = statusMap[event.status_from || ''] || event.status_from || '‚Äî'
        const toStatus = statusMap[event.status_to || ''] || event.status_to || '‚Äî'
        description = `${fromStatus} ‚Üí ${toStatus}`
        break

      case 'PAYMENT_CREATED':
        icon = 'üí∞'
        color = 'green'
        title = '–ü–ª–∞—Ç–µ–∂'
        if (event.amount_to) {
          const typeMap: Record<string, string> = {
            'ADV': '–ê–≤–∞–Ω—Å',
            'RET': '–í–æ–∑–≤—Ä–∞—Ç',
            'DEBT': '–û–ø–ª–∞—Ç–∞'
          }
          const paymentType = '–û–ø–ª–∞—Ç–∞'
          description = `${paymentType} ${this.formatCurrency(event.amount_to, 'RUB')}`
        }
        break

      case 'PAYMENT_STATUS_CHANGED':
        icon = 'üí≥'
        color = event.status_to === 'completed' || event.status_to === 'paid' ? 'green' :
               event.status_to === 'cancelled' || event.status_to === 'failed' ? 'red' : 'blue'
        title = '–ü–ª–∞—Ç–µ–∂'
        const fromPayStatus = statusMap[event.status_from || ''] || event.status_from || '‚Äî'
        const toPayStatus = statusMap[event.status_to || ''] || event.status_to || '‚Äî'
        description = `${fromPayStatus} ‚Üí ${toPayStatus}`
        break

      case 'PAYMENT_AMOUNT_CHANGED':
        icon = 'üíµ'
        color = 'orange'
        title = '–°—É–º–º–∞'
        if (event.amount_from && event.amount_to) {
          const diff = event.amount_to - event.amount_from
          const sign = diff > 0 ? '+' : ''
          description = `${sign}${this.formatCurrency(diff, 'RUB')}`
        }
        break

      case 'DOCUMENT_ADDED':
        icon = 'üìé'
        color = 'blue'
        title = '–î–æ–∫—É–º–µ–Ω—Ç'
        if (event.metadata?.file_name) {
          // –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
          let fileName = event.metadata.file_name
          if (fileName.length > 30) {
            const ext = fileName.split('.').pop()
            fileName = fileName.substring(0, 25) + '...' + (ext ? `.${ext}` : '')
          }
          description = fileName
        }
        break

      case 'DOCUMENT_REMOVED':
        icon = 'üóëÔ∏è'
        color = 'red'
        title = '–£–¥–∞–ª–µ–Ω'
        if (event.metadata?.file_name) {
          let fileName = event.metadata.file_name
          if (fileName.length > 30) {
            const ext = fileName.split('.').pop()
            fileName = fileName.substring(0, 25) + '...' + (ext ? `.${ext}` : '')
          }
          description = fileName
        }
        break

      case 'COMMENT_ADDED':
        icon = 'üí¨'
        color = 'blue'
        title = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        description = event.description || ''
        if (description.length > 100) {
          description = description.substring(0, 97) + '...'
        }
        break

      case 'INVOICE_DELETED':
        icon = '‚ùå'
        color = 'red'
        title = '–£–¥–∞–ª–µ–Ω'
        if (event.metadata?.invoice_number) {
          description = `–°—á–µ—Ç ‚Ññ${event.metadata.invoice_number}`
        }
        break

      case 'PAYMENT_DELETED':
        icon = '‚ùå'
        color = 'red'
        title = '–£–¥–∞–ª–µ–Ω'
        if (event.payment_internal_number) {
          description = `–ü–ª–∞—Ç–µ–∂ ${event.payment_internal_number}`
        }
        break

      case 'WORKFLOW_CHANGED':
        icon = '‚öôÔ∏è'
        color = 'purple'
        title = '–ú–∞—Ä—à—Ä—É—Ç'
        description = event.description || '–ò–∑–º–µ–Ω–µ–Ω –º–∞—Ä—à—Ä—É—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'
        break

      case 'MRP_CHANGED':
        icon = 'üë§'
        color = 'blue'
        title = '–ú–û–õ'
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ú–û–õ
        if (event.old_values && event.new_values) {
          const oldName = event.old_values.material_responsible_person_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
          const newName = event.new_values.material_responsible_person_name || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
          description = `${oldName} ‚Üí ${newName}`
        } else {
          description = '–∏–∑–º–µ–Ω–µ–Ω'
        }
        break

      default:
        icon = 'üìå'
        color = 'default'
        title = event.action || '–°–æ–±—ã—Ç–∏–µ'
        description = event.description || ''
        if (description.length > 100) {
          description = description.substring(0, 97) + '...'
        }
    }

    return {
      icon,
      color,
      title,
      description,
      details
    }
  }
}